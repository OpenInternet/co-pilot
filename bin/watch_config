#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time
from os.path import basename
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class ConfigHandler(FileSystemEventHandler):

    def __init__(self):
        super(FileSystemEventHandler, self).__init__()
        self.configs = {}

    def add_config(self, process, config):
        self.configs[config] = process

    def on_modified(self, event):
        base = basename(event.src_path)
        if base in self.configs:
            subprocess.call(["supervisorctl", "restart", self.configs[base]])

    def on_created(self, event):
        base = basename(event.src_path)
        if base in self.configs:
            subprocess.call(["supervisorctl", "restart", self.configs[base]])

    def on_deleted(self, event):
        base = basename(event.src_path)
        if base in self.configs:
            subprocess.call(["supervisorctl", "restart", self.configs[base]])

if __name__ == "__main__":
     observer = Observer()
    config_handle = ConfigHandler()
    config_handle.add_config("dnschef", "dnschef.conf")
    config_handle.add_config("create_ap", "ap.conf")
    observer.schedule(config_handle, "/tmp/copilot/")
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
